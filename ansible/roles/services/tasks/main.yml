---

- name: Create manifests folder
  ansible.builtin.file:
    path: "{{ mediabox_data_path }}/manifests"
    state: directory

- name: Copy manifest files
  ansible.builtin.template:
    src: "manifests/{{ item }}.yml.j2"
    dest: "{{ mediabox_data_path }}/manifests/{{ item }}.yml"
  loop: "{{ enable_services }}"

- name: Deploy manifests
  shell: "KUBECONFIG=/home/{{ ansible_user }}/.kube/config kubectl apply -f {{ mediabox_data_path }}/manifests/{{ item }}.yml"
  loop: "{{ enable_services }}"
  when: item != 'recyclarr'

- block:
    - name: Check if zigbee2mqtt configuration file already exists
      stat:
        path: "{{ mediabox_data_path }}/zigbee2mqtt/configuration.yaml"
      register: zigbee2mqtt_configuration_existing

    - name: "Create zigbee2mqtt directory"
      ansible.builtin.file:
        path: "{{ mediabox_data_path }}/zigbee2mqtt"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      when: not zigbee2mqtt_configuration_existing.stat.exists

    - name: Copy zigbee2mqtt configuration file
      ansible.builtin.template:
        src: templates/zigbee2mqtt_config.yml.j2
        dest: "{{ mediabox_data_path }}/zigbee2mqtt/configuration.yaml"
      when: not zigbee2mqtt_configuration_existing.stat.exists
  when: "'zigbee2mqtt' in enable_services"

- block:
    - name: Read the content of Sonarr config.xml
      community.general.xml:
        path: "{{ mediabox_data_path }}/sonarr/config.xml"
        xpath: "/Config/ApiKey"
        content: text
      register: sonarr_config

    - set_fact:
        sonarr_api_key: "{{ sonarr_config.matches[0].ApiKey }}"

    - name: Read the content of Radarr config.xml
      community.general.xml:
        path: "{{ mediabox_data_path }}/radarr/config.xml"
        xpath: "/Config/ApiKey"
        content: text
      register: radarr_config

    - set_fact:
        radarr_api_key: "{{ radarr_config.matches[0].ApiKey }}"

    - name: Create recyclarr folder
      file:
        path: "{{ mediabox_data_path }}/recyclarr"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: Template the file
      template:
        src: recyclarr_config.yml.j2
        dest: "{{ mediabox_data_path }}/recyclarr/recyclarr.yml"

    - name: Deploy recyclarr
      shell: "KUBECONFIG=/home/{{ ansible_user }}/.kube/config kubectl apply -f {{ mediabox_data_path }}/manifests/recyclarr.yml"

    - name: Check containers status
      shell: "KUBECONFIG=/home/{{ ansible_user }}/.kube/config kubectl get pods -A -o json"
      register: kubectl_get_pods
      changed_when: false
      retries: 3
      delay: 5
      until: kubectl_get_pods.stdout | from_json | json_query('items[*].status.phase') | unique | difference(["Running","Succeeded"]) | length == 0

    - name: Get recyclarr pod name
      shell: "KUBECONFIG=/home/{{ ansible_user }}/.kube/config kubectl get pods -n media -l app=recyclarr -o jsonpath='{.items[0].metadata.name}'"
      register: pod_info

    - name: Execute recyclarr sync command
      shell: "KUBECONFIG=/home/{{ ansible_user }}/.kube/config kubectl exec {{ pod_info.resources[0].metadata.name }} -n media -- recyclarr sync"
      register: output
  when: "'recyclarr' in enable_services"
