---
- include_tasks: folder_structure.yml

- set_fact:
    ip_network: "{{ ansible_default_ipv4.address }}/{{ ansible_default_ipv4.netmask }}"

- set_fact:
    tailscale_advertise_routes: "{{ ip_network | ansible.utils.ipaddr('network/prefix') }}"

- name: Create infra namespace
  kubernetes.core.k8s:
    name: infra
    kind: Namespace
    state: present

- name: Create media namespace
  kubernetes.core.k8s:
    name: infra
    kind: Namespace
    state: present

- name: Create manifests folder
  ansible.builtin.file:
    path: "{{ data_path }}/manifests"
    state: directory

- name: Copy manifest files
  ansible.builtin.template:
    src: "manifests/{{ item }}.yml.j2"
    dest: "{{ data_path }}/manifests/{{ item }}.yml"
  loop: "{{ enable_services }}"

- name: Deploy manifests
  kubernetes.core.k8s:
    template: "manifests/{{ item }}.yml.j2"
    apply: true
    server_side_apply:
      field_manager: ansible
  loop: "{{ enable_services }}"
  when: item != 'recyclarr'

- name: Get Traefik External IP
  shell: "KUBECONFIG=/home/{{ ansible_user }}/.kube/config kubectl get svc traefik -n kube-system -o=jsonpath='{.status.loadBalancer.ingress[0].ip}'"
  register: external_ip
  changed_when: false

# Disabled because when overwritting the file Homarr will loose the private creds for each app
# - name: Copy homarr config file to remote server
#   become: true
#   ansible.builtin.template:
#     src: homarr_default.json.j2
#     dest: "{{ data_path }}/homarr/default.json"
#   when: "'homarr' in enable_services"

- block:
    - name: Check if zigbee2mqtt configuration file already exists
      stat:
        path: "{{ data_path }}/zigbee2mqtt/configuration.yaml"
      register: zigbee2mqtt_configuration_existing

    - name: "Create zigbee2mqtt directory"
      ansible.builtin.file:
        path: "{{ data_path }}/zigbee2mqtt"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      when: not zigbee2mqtt_configuration_existing.stat.exists

    - name: Copy zigbee2mqtt configuration file
      ansible.builtin.template:
        src: templates/zigbee2mqtt_config.yml.j2
        dest: "{{ data_path }}/zigbee2mqtt/configuration.yaml"
      when: not zigbee2mqtt_configuration_existing.stat.exists
  when: "'zigbee2mqtt' in enable_services"

- name: Check containers status
  shell: "KUBECONFIG=/home/{{ ansible_user }}/.kube/config kubectl wait pod --for condition=ready --field-selector=status.phase!=Succeeded -A --all --timeout 10m"
  changed_when: false

- block:
    - name: Read the content of Sonarr config.xml
      community.general.xml:
        path: "{{ data_path }}/sonarr/config.xml"
        xpath: "/Config/ApiKey"
        content: text
      register: sonarr_config

    - set_fact:
        sonarr_api_key: "{{ sonarr_config.matches[0].ApiKey }}"

    - name: Read the content of Radarr config.xml
      community.general.xml:
        path: "{{ data_path }}/radarr/config.xml"
        xpath: "/Config/ApiKey"
        content: text
      register: radarr_config

    - set_fact:
        radarr_api_key: "{{ radarr_config.matches[0].ApiKey }}"

    - name: Create recyclarr folder
      file:
        path: "{{ data_path }}/recyclarr"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: Template the file
      template:
        src: recyclarr_config.yml.j2
        dest: "{{ data_path }}/recyclarr/config.yml"

    - name: Deploy recyclarr
      kubernetes.core.k8s:
        template: "manifests/recyclarr.yml.j2"
        apply: true
        server_side_apply:
          field_manager: ansible

    - name: Check containers status
      shell: "KUBECONFIG=/home/{{ ansible_user }}/.kube/config kubectl wait pod --for condition=ready --field-selector=status.phase!=Succeeded -A --all --timeout 10m"
      changed_when: false

    - name: Get recyclarr pod name
      kubernetes.core.k8s_info:
        kind: Pod
        api_version: v1
        namespace: media
        label_selectors:
          - app = recyclarr
      register: pod_info

    - name: Execute recyclarr sync command
      shell: "KUBECONFIG=/home/{{ ansible_user }}/.kube/config kubectl exec {{ pod_info.resources[0].metadata.name }} -n media -- recyclarr sync"
      register: output

    - name: Show output of recyclarr sync command
      debug:
        var: output.stdout_lines
  when: "'recyclarr' in enable_services"